

1-Defina a função void Atraso(volatile unsigned int x); que fornece um atraso de x milissegundos. Utilize o Timer_A para a contagem de tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. Esta função poderá ser utilizada diretamente nas outras questões desta prova.


   #include <msp430g2553.h>
   #include <intrinsics.h> 
   #define PERIODO 62500  
   #define PERIODO 125    
   #define LED BIT0

  void Atraso(volatile unsigned int i)
      {
        TA0CCR0 =((PERIODO-1)*i);       
	TA0CTL = TASSEL_2 + ID_2 + MC_1 + TAIE;
	 _BIS_SR(LPM0_bits+GIE);
        
   while(1)
           {
            while((TA0CTL & TAIFG)==0);
           {
	    P1OUT ^= LED;
	    TA0CTL &= ~TAIFG;
           }
      }

   int main(void)
       {
	
        WDTCTL = WDTPW + WDTHOLD;		
	BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz
	P1OUT &= ~LED;
	P1DIR |= LED;
        Atraso(i);	
    }

   *#pragma vector = TIMER0_A1_VECTOR
   __interrupt void TIMER0_TA0_ISR(void)

    {
	 P1OUT ^= LED;
	 TA0CTL &= ~TAIFG;
    }

    2-Pisque os LEDs da Launchpad numa frequência de 100 Hz.

          É so fazer o atraso(10);

    3-Pisque os LEDs da Launchpad numa frequência de 20 Hz.

          É so fazer o atraso(50);

    4-Pisque os LEDs da Launchpad numa frequência de 1 Hz.

          É so fazer o atraso(1000);

    5-Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.

         É so fazer o atraso(2000);



   6-Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.
  
    #include <msp430g2553.h>
    #include <intrinsics.h>
    #define PERIODO 62500  
    #define PERIODO 125    
    #define LED BIT0

  void Atraso(volatile unsigned int i)
           {
            TA0CCR0 =((PERIODO-1)*i); //10000-1;
	    TA0CTL = TASSEL_2 + ID_2 + MC_1 + TAIE;
	    _BIS_SR(LPM0_bits+GIE);
           }

    int main(void)
       {
	WDTCTL = WDTPW + WDTHOLD;	
	BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz
	P1OUT &= ~LED;
	P1DIR |= LED;
        Atraso(i);
        	
       }

   #pragma vector = TIMER0_A1_VECTOR
   __interrupt void TIMER0_TA0_ISR(void)
       {
	  P1OUT ^= LED;
	  TA0CTL &= ~TAIFG;
      }


  